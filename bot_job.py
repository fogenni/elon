import mysql.connector.pooling
import os
from dotenv import load_dotenv
from yookassa import Configuration
from telegram import CallbackQuery
from telegram.ext import CallbackQueryHandler
from telegram.ext import ApplicationBuilder
from telegram import KeyboardButton
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ReplyKeyboardMarkup
from telegram import Update
import re
from datetime import datetime, timedelta, date
from mysql.connector.errors import IntegrityError
import uuid
from yookassa import Payment
from uuid import uuid4
from dateutil.relativedelta import relativedelta
from contextlib import contextmanager
from telegram.ext import (
    CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters
)

TYPE_PATTERN = re.compile(r'^(daily|weekly|monthly)$', re.IGNORECASE)

load_dotenv()
Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

dbconfig = {
    "host": "127.0.0.1",
    "port": 3306,
    "user": "default-db",
    "password": "SQD3Fl*ZUszy",
    "database": "cloud_database_1"
}

# –°–æ–∑–¥–∞—ë–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
cnxpool = mysql.connector.pooling.MySQLConnectionPool(
    pool_name="mypool",
    pool_size=32,  # –ú–∞–∫—Å–∏–º—É–º 32 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    **dbconfig
)


@contextmanager
def db_connect():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î:
    ‚Äì –¥–∞—ë—Ç –≤–∞–º conn –∏ cursor
    ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç, –µ—Å–ª–∏ –≤—Å—ë –æ–∫, –∏–ª–∏ –¥–µ–ª–∞–µ—Ç rollback
    ‚Äì –∑–∞–∫—Ä—ã–≤–∞–µ—Ç cursor –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç conn –≤ –ø—É–ª
    """
    conn = cnxpool.get_connection()
    cursor = conn.cursor()
    try:
        yield conn, cursor
        conn.commit()
    except Exception:
        conn.rollback()
        raise
    finally:
        cursor.close()
        conn.close()


# –ì–ª–∞–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
ADMIN_IDS = [1728077528]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_EMPLOYEE = 0
SET_TASK_DESCRIPTION = 10
SET_TASK_DEADLINE = 11
SET_TASK_EMPLOYEE = 12


BONUS_EMPLOYEE = 20
BONUS_AMOUNT = 21



def get_table(table_base, company_id):
    if company_id:
        return f"company_{company_id}_{table_base}"
    return table_base

def get_company_id(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ Telegram user_id.
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º;
    –∑–∞—Ç–µ–º –∏—â–µ—Ç –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π.
    """
    with db_connect() as (conn, cursor):
        # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ company_id
        cursor.execute(
            "SELECT id FROM companies WHERE admin_id = %s",
            (user_id,)
        )
        row = cursor.fetchone()
        if row:
            return row[0]

        # 2. –ò–Ω–∞—á–µ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏—â–µ–º –≤ –∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö employees
        cursor.execute("SELECT id FROM companies")
        for (cid,) in cursor.fetchall():
            emp_table = get_table("employees", cid)
            try:
                cursor.execute(
                    f"SELECT id FROM {emp_table} WHERE telegram_id = %s",
                    (user_id,)
                )
                if cursor.fetchone():
                    return cid
            except mysql.connector.Error:
                continue
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª—É—á–∞–µ–≤
    return None

def is_company_admin(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    with db_connect() as (conn, cursor):
        cursor.execute(
            "SELECT id FROM companies WHERE admin_id = %s",
            (user_id,)
        )
        return cursor.fetchone() is not None

def main_menu_keyboard(user_id=None):
    keyboard = [
        ["üè† –°—Ç–∞—Ä—Ç","üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], #"üìë –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏" #"üí∏ –ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞"
        ["–Ø –ø—Ä–∏—à–µ–ª", "–Ø —É—à–µ–ª"],
        ["–ú–æ–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è", "–ú–æ–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã"],
        ["üìã –ú–æ–∏ —á–µ–∫–ª–∏—Å—Ç—ã", "üò§ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"],
        ["üì¶ –ú–æ–π —Å–±–æ—Ä"],
        ["üì¶ –ú–æ–π —Å–±–æ—Ä –∑–∞ –¥–µ–Ω—å", "üì¶ –ú–æ–π —Å–±–æ—Ä –∑–∞ –º–µ—Å—è—Ü"],
    ]
    if is_company_admin(user_id):
        keyboard.append(["üëë –ê–¥–º–∏–Ω", "üí≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def handle_admin_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    section = update.message.text.strip()
    context.user_data["admin_section"] = section  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
    keyboard = admin_submenu_keyboard(section, user_id=update.effective_user.id)
    title = re.sub(r"^[^a-zA-Z–∞-—è–ê-–Ø0-9]+", "", section).strip(":")
    await update.message.reply_text(f"üîß –†–∞–∑–¥–µ–ª: *{title}*", parse_mode="Markdown", reply_markup=keyboard)

def admin_submenu_keyboard(section, user_id=None):
    menus = {
        "üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏": [
            ["‚ùå –£–≤–æ–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"],
            ["üëÅ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        "üìù –ó–∞–¥–∞—á–∏": [
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏"],
            ["‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã": [
            ["üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫-–ª–∏—Å—Ç–æ–≤", "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —á–µ–∫-–ª–∏—Å—Ç"],
            ["üìä –û—Ç—á–µ—Ç –ø–æ —á–µ–∫-–ª–∏—Å—Ç–∞–º"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        "üìä –ó–∞—Ä–ø–ª–∞—Ç—ã –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è": [
            ["üìà –û—Ç—á—ë—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ", "üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"],
            ["üõ† –û–∫–ª–∞–¥ –∏ –Ω–æ—Ä–º–∞"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        "üí∞ –ü—Ä–µ–º–∏–∏ –∏ —à—Ç—Ä–∞—Ñ—ã": [
            ["üéÅ –ü—Ä–µ–º–∏—è", "‚ö†Ô∏è –®—Ç—Ä–∞—Ñ"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        "üì¶ –°–±–æ—Ä–∫–∞": [
            ["üìã –û—Ç—á—ë—Ç –ø–æ —Å–±–æ—Ä–∫–µ", "üìä –°—Ä–µ–¥–Ω—è—è —Å–±–æ—Ä–∫–∞"],
            ["‚ûï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞": [
            ["üÜî ID –∫–æ–º–ø–∞–Ω–∏–∏"],
            ["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üÜî –ú–æ–π ID"],
            ["üì¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
    }
    return ReplyKeyboardMarkup(menus.get(section, [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]), resize_keyboard=True)


async def handle_admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_section = context.user_data.get("admin_section")

    if last_section:
        await admin_commands(update, context)
        context.user_data.pop("admin_section", None)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_keyboard(update.effective_user.id))


async def admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_company_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await update.message.reply_text(
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([
            ["üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏", "üìù –ó–∞–¥–∞—á–∏"],
            ["‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã", "üìä –ó–∞—Ä–ø–ª–∞—Ç—ã –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è"],
            ["üí∞ –ü—Ä–µ–º–∏–∏ –∏ —à—Ç—Ä–∞—Ñ—ã", "üì¶ –°–±–æ—Ä–∫–∞"],
            ["‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", "‚ùì –ß—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç"], 
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                "SELECT id FROM companies WHERE admin_id = %s",
                (user_id,)
            )
            company = cursor.fetchone()
    except Exception as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏: {err}")
        return

    # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –µ—Å—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –≤—Ö–æ–¥–∏–º
    if company and check_subscription(user_id):
        return await login(update, context)

    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
        "‚Ä¢ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞* ‚Äî –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n"
        "‚Ä¢ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏* ‚Äî –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ —Å—Ç–∞—Ç—å –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "‚Ä¢ *–í–æ–π—Ç–∏* ‚Äî –µ—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É.\n"
    )
    registration_keyboard = ReplyKeyboardMarkup(
        [
            ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"],
            ["–í–æ–π—Ç–∏", "‚ùì –ß—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç"]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        welcome_text,
        reply_markup=registration_keyboard,
        parse_mode="Markdown"
    )
# –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ "–°—Ç–∞—Ä—Ç"
    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                "INSERT INTO start_clicks (telegram_id) VALUES (%s)",
                (user_id,),
            )
    except mysql.connector.Error as err:
        # –ï—Å–ª–∏ —É–∂ —Å–æ–≤—Å–µ–º –Ω–µ —Ö–æ—á–µ—Ç—Å—è –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞,
        # –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç: {err}")



async def show_features(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ª–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ ¬´–ß—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç¬ª
    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                "INSERT INTO features_clicks (telegram_id) VALUES (%s)",
                (user_id,),
            )
    except mysql.connector.Error as err:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {err}")
    
    features_text = (
        "*ü§ñ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:*\n\n"
        "‚Ä¢ üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ ‚è∞ –£—á—ë—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π: ¬´–Ø –ø—Ä–∏—à–µ–ª¬ª / ¬´–Ø —É—à–µ–ª¬ª\n"
        "‚Ä¢ üí∞ –†–∞—Å—á—ë—Ç –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –Ω–æ—Ä–º–∞–º –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞–º\n"
        "‚Ä¢ üìã –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏\n"
        "‚Ä¢ ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã\n"
        "‚Ä¢ üì¶ –£—á—ë—Ç —Å–±–æ—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç—á—ë—Ç—ã (—Å–µ–≥–æ–¥–Ω—è, –∑–∞ –º–µ—Å—è—Ü, —Å—Ä–µ–¥–Ω–µ–µ)\n"
        "‚Ä¢ üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤\n"
        "‚Ä¢ üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∏–∑–±–∞–≤–∏—Ç –≤–∞—Å –æ—Ç —Ä—É—Ç–∏–Ω–Ω—ã—Ö Excel-—Ç–∞–±–ª–∏—Ü –∏ –¥–∞—Å—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å "
        "–Ω–∞–¥ —à—Ç–∞—Ç–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ–ø–ª–∞—Ç–æ–π —Ç—Ä—É–¥–∞ –ø—Ä—è–º–æ –≤ Telegram."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    await update.message.reply_text(features_text, parse_mode="Markdown")

    # –¢–µ–ø–µ—Ä—å –≤—Ä—É—á–Ω—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∫–∞–∫ –≤ start()
    registration_keyboard = ReplyKeyboardMarkup(
        [
            ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"],
            ["–í–æ–π—Ç–∏", "‚ùì –ß—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç"]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=registration_keyboard
    )
    # –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º



async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ª–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ ¬´–í–æ–π—Ç–∏¬ª
    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                "INSERT INTO login_clicks (telegram_id) VALUES (%s)",
                (user_id,),
            )
    except mysql.connector.Error as err:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥: {err}")

    if not check_subscription(user_id):
        await update.message.reply_text(
            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /pay_subscription –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            cursor.execute(
                f"SELECT id FROM {emp_table} WHERE telegram_id = %s",
                (user_id,)
            )
            row = cursor.fetchone()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            cursor.execute(
                "SELECT id FROM companies WHERE admin_id = %s",
                (user_id,)
            )
            company = cursor.fetchone()

        if row or company:
            
            if row:
                context.user_data['emp_id'] = row[0]
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!",
                reply_markup=main_menu_keyboard(user_id)
            )
        else:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            )

    except Exception as err:
        
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {err}")


async def register_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏:
    ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–¥–º–∏–Ω –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏,
    """
    user_id = update.effective_user.id
    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                "INSERT INTO company_register_clicks (telegram_id) VALUES (%s)",
                (user_id,),
            )
    except mysql.connector.Error as err:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏: {err}")

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                "SELECT id FROM companies WHERE admin_id = %s",
                (user_id,)
            )
            if cursor.fetchone():
                await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è.")
                return ConversationHandler.END

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
        return 1
    except Exception as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return ConversationHandler.END



async def save_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é, —Å–æ–∑–¥–∞—ë—Ç –µ—ë —Ç–∞–±–ª–∏—Ü—ã, –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 
    –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞.
    """
    user_id = update.effective_user.id
    company_name = update.message.text

    try:
        # 1) –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
        with db_connect() as (conn, cursor):
            cursor.execute(
                "INSERT INTO companies (name, admin_id) VALUES (%s, %s)",
                (company_name, user_id)
            )
            company_id = cursor.lastrowid

        # 2) –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        create_company_tables(company_id)

        # 3) –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            admin_name = update.effective_user.full_name
            cursor.execute(
                f"INSERT INTO {emp_table} (name, telegram_id) VALUES (%s, %s)",
                (admin_name, user_id)
            )
        # 4) –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞
        start_date = datetime.today().date()
        end_date   = start_date + relativedelta(months=3)
        with db_connect() as (conn, cursor):
            cursor.execute(
                """
                INSERT INTO subscriptions
                  (company_id, start_date, end_date, amount, status)
                VALUES (%s, %s, %s, %s, %s)
                """,
                (company_id, start_date, end_date, 0, 'active')
            )
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è ¬´{company_name}¬ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date}.",
            reply_markup=ReplyKeyboardMarkup(
                [["–í–æ–π—Ç–∏"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return ConversationHandler.END

    except Exception as err:
        
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {err}")
        return ConversationHandler.END
    
async def show_company_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with db_connect() as (conn, cursor):
        try:
            cursor.execute("SELECT id, name FROM companies WHERE admin_id = %s", (user_id,))
            company = cursor.fetchone()
            if not company:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
                return
            company_id, company_name = company
            await update.message.reply_text(f"üÜî ID –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ \"{company_name}\": {company_id}")
        except mysql.connector.Error as err:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
    


async def check_long_shifts(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    threshold = now - timedelta(hours=8)

    
    with db_connect() as (conn, cursor):
        
        cursor.execute("SELECT id FROM companies")
        companies = cursor.fetchall()

        # 2) –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–º–µ–Ω—ã
        for (company_id,) in companies:
            attendance_table = get_table("attendance", company_id)
            emp_table = get_table("employees", company_id)

            cursor.execute(f"""
                SELECT a.employee_id, a.start_time, e.telegram_id
                FROM {attendance_table} a
                JOIN {emp_table} e ON a.employee_id = e.id
                WHERE a.end_time IS NULL
            """)
            rows = cursor.fetchall()

            
            for employee_id, start_time, telegram_id in rows:
                if start_time < threshold:
                    await context.bot.send_message(
                        chat_id=telegram_id,
                        text='‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø —É—à–µ–ª", –µ—Å–ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É.'
                    )
    
    


async def show_reg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:       
        with db_connect() as (conn, cursor):
            cursor.execute("SELECT COUNT(*) FROM companies")
            (count,) = cursor.fetchone()        
        await update.message.reply_text(f"üìã –í –±–∞–∑–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {count}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")


async def pay_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    if update.message:
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
    elif update.callback_query:
        await update.callback_query.answer()
        user_id = update.callback_query.from_user.id
        chat_id = update.callback_query.message.chat.id
    else:
        return

    try:
        # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        with db_connect() as (conn, cursor):
            cursor.execute("SELECT id FROM companies WHERE admin_id = %s", (user_id,))
            row = cursor.fetchone()

        if not row:
            await context.bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é.")
            return

        company_id = row[0]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
        payment_id = str(uuid.uuid4())
        amount_rub = 290
        return_url = f"https://t.me/{context.bot.username}"

        payment = Payment.create({
            "amount": {
                "value": f"{amount_rub}.00",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}",
            "metadata": {
                "company_id": str(company_id),
                "admin_id": str(user_id)
            }
        }, uuid.uuid4())

        confirm_url = payment.confirmation.confirmation_url
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π ‚Äî {amount_rub}‚ÇΩ.\n\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{confirm_url}\n\n"
            ),
            disable_web_page_preview=True
        )

        context.chat_data["payment_id"] = payment.id
        context.chat_data["company_id"] = company_id

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–æ–≥–æ –∂–µ –ø–ª–∞—Ç–µ–∂–∞
        existing_jobs = context.job_queue.get_jobs_by_name(f"check_{payment.id}")
        for job in existing_jobs:
            job.schedule_removal()

        # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        context.job_queue.run_repeating(
            check_payment_status_job,
            interval=20,
            first=30,
            data={
                "chat_id": chat_id,
                "payment_id": payment.id,
                "company_id": company_id,
                "retries": 0
            },
            name=f"check_{payment.id}"
        )

    except Exception as e:
        await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")



def check_subscription(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —é–∑–µ—Ä–∞.
    """
    try:
        with db_connect() as (conn, cursor):
            # 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            cursor.execute(
                "SELECT id FROM companies WHERE admin_id = %s", 
                (user_id,)
            )
            row = cursor.fetchone()
            if row:
                company_id = row[0]
            else:
                # 2) –ò—â–µ–º –µ–≥–æ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                cursor.execute("SELECT id FROM companies")
                all_companies = cursor.fetchall()
                company_id = None
                for (cid,) in all_companies:
                    emp_table = f"company_{cid}_employees"
                    try:
                        cursor.execute(
                            f"SELECT id FROM {emp_table} WHERE telegram_id = %s",
                            (user_id,)
                        )
                        if cursor.fetchone():
                            company_id = cid
                            break
                    except mysql.connector.Error:
                        # –¢–∞–±–ª–∏—Ü—ã –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue

                if not company_id:
                    return False

            # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            cursor.execute(
                """
                SELECT end_date
                FROM subscriptions
                WHERE company_id = %s AND status = 'active'
                ORDER BY end_date DESC
                LIMIT 1
                """,
                (company_id,)
            )
            sub = cursor.fetchone()
            if not sub or sub[0] < datetime.today().date():
                return False

            return True

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ check_subscription: {err}")
        return False


async def check_payment_status_job(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    chat_id = data.get("chat_id")
    payment_id = data.get("payment_id")
    company_id = data.get("company_id")
    retries = data.get("retries", 0)

    if retries >= 9:
        await context.bot.send_message(chat_id, "‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        context.job.schedule_removal()
        return
    data["retries"] = retries + 1
    context.job.data = data

    try:
        payment = Payment.find_one(payment_id)
        if payment.status == "succeeded":
            today = datetime.today().date()
            
            with db_connect() as (conn, cursor):            
                cursor.execute(
                    """
                    SELECT end_date
                    FROM subscriptions
                    WHERE company_id = %s AND status = 'active'
                    ORDER BY end_date DESC
                    LIMIT 1
                    """,
                    (company_id,)
                )
                row = cursor.fetchone()

                if row and row[0] and row[0] > today:
                    start_date = row[0]
                else:
                    start_date = today

                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ 30 –¥–Ω–µ–π
                end_date = start_date + timedelta(days=30)
                amount = int(float(payment.amount.value))

                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                cursor.execute(
                    """
                    INSERT INTO subscriptions 
                        (company_id, start_date, end_date, amount, status)
                    VALUES (%s, %s, %s, %s, %s)
                    """,
                    (company_id, start_date, end_date, amount, 'active')
                )
                

            await context.bot.send_message(chat_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_date}!")
            context.job.schedule_removal()
        
    except Exception as e:
        await context.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")


EMPLOYEE_REGISTRATION_COMPANY = 1

async def register_employee_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.effective_user.full_name
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–Ω–∞ –±—É–¥—É—â–µ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    context.user_data['employee_name'] = name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:")
    return EMPLOYEE_REGISTRATION_COMPANY

async def register_employee_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é (ID –≤–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º).
    –°–æ—Å—Ç–æ—è–Ω–∏–µ: EMPLOYEE_REGISTRATION_COMPANY
    """
    
    try:
        company_id = int(update.message.text)
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∫–æ–º–ø–∞–Ω–∏–∏."
        )
        return EMPLOYEE_REGISTRATION_COMPANY

    try:
        with db_connect() as (conn, cursor):
            
            cursor.execute("SELECT id, name FROM companies WHERE id = %s", (company_id,))
            company = cursor.fetchone()
            if not company:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
                return EMPLOYEE_REGISTRATION_COMPANY

            
            user_id = update.effective_user.id
            name = context.user_data.get('employee_name', update.effective_user.full_name)
            emp_table = get_table("employees", company_id)
            cursor.execute(
                f"INSERT INTO {emp_table} (name, telegram_id) VALUES (%s, %s)",
                (name, user_id)
            )
        
        await update.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ \"{company[1]}\"!",
            reply_markup=ReplyKeyboardMarkup([["–°—Ç–∞—Ä—Ç"]], resize_keyboard=True, one_time_keyboard=True)
        )
        return ConversationHandler.END

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return ConversationHandler.END
            
HANDLE_DEADLINE_BUTTON = 10001
HANDLE_EMPLOYEE_BUTTON = 10002
SET_TASK_DEADLINE = 11  
SET_TASK_EMPLOYEE = 12

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return SET_TASK_DESCRIPTION

async def set_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_description'] = update.message.text

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è", callback_data="deadline_today")],
        [InlineKeyboardButton("üóì –î–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏", callback_data="deadline_week")],
        [InlineKeyboardButton("üìÜ –î–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞", callback_data="deadline_month")],
        [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –¥–∞—Ç–∞", callback_data="deadline_custom")]
    ])

    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    return HANDLE_DEADLINE_BUTTON  

async def handle_custom_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text.strip()
        deadline = datetime.strptime(user_input, "%d-%m-%Y").date()
        context.user_data['task_deadline'] = deadline.strftime("%Y-%m-%d")

        return await show_employee_buttons(update, context)

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î-–ú–ú-–ì–ì–ì–ì*.", parse_mode="Markdown")
        return SET_TASK_DEADLINE  

async def handle_deadline_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    today = date.today()

    if query.data == "deadline_today":
        deadline = today
    elif query.data == "deadline_week":
        deadline = today + timedelta(days=(6 - today.weekday()))
    elif query.data == "deadline_month":
        next_month = today.replace(day=28) + timedelta(days=4)
        deadline = next_month.replace(day=1) - timedelta(days=1)
    elif query.data == "deadline_custom":
        await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY:")
        return SET_TASK_DEADLINE
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return ConversationHandler.END

    context.user_data['task_deadline'] = deadline.strftime("%Y-%m-%d")

    
    return await show_employee_buttons(query, context)


async def show_employee_buttons(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    
    user_id = (
        update_or_query.from_user.id
        if isinstance(update_or_query, CallbackQuery)
        else update_or_query.effective_user.id
    )
    company_id = get_company_id(user_id)
    emp_table = get_table("employees", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"SELECT id, name FROM {emp_table}")
            employees = cursor.fetchall()
    except mysql.connector.Error as err:
        await update_or_query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return ConversationHandler.END

    if not employees:
        await update_or_query.message.reply_text("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return ConversationHandler.END

    # –°—Ç—Ä–æ–∏–º Inline-–∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(name, callback_data=f"task_emp_{emp_id}")]
        for emp_id, name in employees
    ]
    markup = InlineKeyboardMarkup(buttons)

    await update_or_query.message.reply_text(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=markup
    )
    return HANDLE_EMPLOYEE_BUTTON

async def handle_employee_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ InlineKeyboard –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ë–î.
    """
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("task_emp_"):
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return ConversationHandler.END

    emp_id = int(query.data.split("_")[-1])
    description = context.user_data.get('task_description')
    deadline = context.user_data.get('task_deadline')
    company_id = get_company_id(query.from_user.id)
    tasks_table = get_table("tasks", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                f"INSERT INTO {tasks_table} (employee_id, description, deadline) VALUES (%s, %s, %s)",
                (emp_id, description, deadline)
            )
    except mysql.connector.Error as err:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return ConversationHandler.END

    await query.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END



async def select_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    try:
        employee_id = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
        return SET_TASK_EMPLOYEE

    description = context.user_data['task_description']
    deadline = context.user_data['task_deadline']
    company_id = get_company_id(update.effective_user.id)
    tasks_table = get_table("tasks", company_id)

    try:
        
        with db_connect() as (conn, cursor):
            cursor.execute(
                f"INSERT INTO {tasks_table} (employee_id, description, deadline) "
                "VALUES (%s, %s, %s)",
                (employee_id, description, deadline)
            )
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return ConversationHandler.END

    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END

async def admin_view_employees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏, –µ—Å–ª–∏ –≤—ã ‚Äî –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
    """
    user_id = update.effective_user.id
    try:
        with db_connect() as (conn, cursor):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT id FROM companies WHERE admin_id = %s", (user_id,))
            company = cursor.fetchone()
            if not company:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–ø–∞–Ω–∏–∏.")
                return

            company_id = company[0]
            emp_table = get_table("employees", company_id)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            cursor.execute(f"SELECT id, name FROM {emp_table}")
            employees = cursor.fetchall()

        # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ with –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã,
        # –Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `employees` —É –Ω–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å.
        if not employees:
            await update.message.reply_text("‚ö†Ô∏è –í –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return

        text = "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:\n"
        for emp_id, emp_name in employees:
            text += f"üÜî ID: {emp_id} | üë§ {emp_name}\n"

        await update.message.reply_text(text)

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")



async def view_checklists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    """
    user_id = update.effective_user.id
    try:
        with db_connect() as (conn, cursor):
            company_id = get_company_id(user_id)
            emp_table = get_table("employees", company_id)
            checklists_table = get_table("checklists", company_id)
            completions_table = get_table("checklist_completions", company_id)

            cursor.execute(f"SELECT id FROM {emp_table} WHERE telegram_id = %s", (user_id,))
            emp = cursor.fetchone()
            if not emp:
                await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            emp_id = emp[0]

            cursor.execute(f"""
                SELECT
                  c.id,
                  c.checklist_type,
                  c.description,
                  CASE
                    WHEN c.checklist_type = 'daily' THEN (
                      SELECT COUNT(*) FROM {completions_table} cc
                      WHERE cc.checklist_id = c.id AND cc.employee_id = %s AND cc.completion_date = CURDATE()
                    )
                    WHEN c.checklist_type = 'weekly' THEN (
                      SELECT COUNT(*) FROM {completions_table} cc
                      WHERE cc.checklist_id = c.id AND cc.employee_id = %s
                        AND YEARWEEK(cc.completion_date, 1) = YEARWEEK(CURDATE(), 1)
                    )
                    WHEN c.checklist_type = 'monthly' THEN (
                      SELECT COUNT(*) FROM {completions_table} cc
                      WHERE cc.checklist_id = c.id AND cc.employee_id = %s
                        AND YEAR(cc.completion_date) = YEAR(CURDATE())
                        AND MONTH(cc.completion_date) = MONTH(CURDATE())
                    )
                    ELSE 0
                  END AS is_completed
                FROM {checklists_table} c
                WHERE c.employee_id = %s
                ORDER BY c.checklist_type
            """, (emp_id, emp_id, emp_id, emp_id))
            tasks = cursor.fetchall()

        if not tasks:
            await update.message.reply_text("üì≠ *–ß–µ–∫-–ª–∏—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.*", parse_mode="Markdown")
            return

        for checklist_id, checklist_type, description, is_completed in tasks:
            emoji = {"daily": "üìÖ", "weekly": "üóì", "monthly": "üìÜ"}.get(checklist_type, "üìù")
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

            text = (
                f"{emoji} *{checklist_type.capitalize()}*\n"
                f"üìå _{description}_\n"
                f"üÜî *ID:* `{checklist_id}`\n"
                f"üéØ {status}"
            )

            keyboard = None
            if not is_completed:
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{checklist_id}")
                ]])

            await update.message.reply_text(text, parse_mode="Markdown", reply_markup=keyboard)

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def complete_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–º–µ—á–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –ø–æ –µ–≥–æ ID.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /complete_checklist <ID>
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/complete_checklist <ID>`",
            parse_mode="Markdown"
        )
        return

    checklist_id = int(context.args[0])
    user_id = update.effective_user.id

    try:
        with db_connect() as (conn, cursor):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            company_id = get_company_id(user_id)
            if not company_id:
                await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            emp_table = get_table("employees", company_id)
            checklists_table = get_table("checklists", company_id)
            completions_table = get_table("checklist_completions", company_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ
            cursor.execute(f"SELECT id FROM {emp_table} WHERE telegram_id = %s", (user_id,))
            emp = cursor.fetchone()
            if not emp:
                await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            emp_id = emp[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π —á–µ–∫-–ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            cursor.execute(
                f"SELECT id FROM {checklists_table} WHERE id = %s AND employee_id = %s",
                (checklist_id, emp_id)
            )
            if not cursor.fetchone():
                await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            cursor.execute(
                f"""SELECT id FROM {completions_table}
                    WHERE checklist_id = %s AND employee_id = %s AND completion_date = %s""",
                (checklist_id, emp_id, today)
            )
            if cursor.fetchone():
                await update.message.reply_text("‚úÖ –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è.")
                return

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            cursor.execute(
                f"""INSERT INTO {completions_table}
                    (checklist_id, employee_id, completion_date, completed)
                    VALUES (%s, %s, %s, TRUE)""",
                (checklist_id, emp_id, today)
            )
        await update.message.reply_text(
            f"üéâ ‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {checklist_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
            parse_mode="Markdown"
        )

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def handle_complete_checklist_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("complete_"):
        return

    checklist_id = int(data.replace("complete_", ""))
    user_id = query.from_user.id

    try:
        with db_connect() as (conn, cursor):
            company_id = get_company_id(user_id)
            emp_table = get_table("employees", company_id)
            checklists_table = get_table("checklists", company_id)
            completions_table = get_table("checklist_completions", company_id)

            cursor.execute(
                f"SELECT id FROM {emp_table} WHERE telegram_id = %s",
                (user_id,)
            )
            emp = cursor.fetchone()
            if not emp:
                await query.edit_message_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            emp_id = emp[0]

            cursor.execute(
                f"SELECT id FROM {checklists_table} WHERE id = %s AND employee_id = %s",
                (checklist_id, emp_id)
            )
            if not cursor.fetchone():
                await query.edit_message_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                return

            today = datetime.now().date()
            cursor.execute(
                f"""SELECT id FROM {completions_table}
                   WHERE checklist_id = %s AND employee_id = %s AND completion_date = %s""",
                (checklist_id, emp_id, today)
            )
            if cursor.fetchone():
                await query.edit_message_text("‚úÖ –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è.")
                return

            cursor.execute(
                f"""INSERT INTO {completions_table}
                    (checklist_id, employee_id, completion_date, completed)
                    VALUES (%s, %s, %s, TRUE)""",
                (checklist_id, emp_id, today)
            )

        await query.edit_message_text(f"üéâ ‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {checklist_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")

    except mysql.connector.Error as err:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")





CHOOSE_EMPLOYEE_ID_FOR_CHECKLIST = 1001
CHOOSE_TYPE_FOR_CHECKLIST = 1002
ENTER_DESCRIPTION_FOR_CHECKLIST = 1003

async def start_add_checklist_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            cursor.execute(f"SELECT id, name FROM {emp_table}")
            employees = cursor.fetchall()

        if not employees:
            await update.message.reply_text("‚ö†Ô∏è –í –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return ConversationHandler.END

        text = "üë• –í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞:\n\n"
        for emp_id, emp_name in employees:
            text += f"üÜî {emp_id} ‚Äî {emp_name}\n"

        await update.message.reply_text(
            text,
            reply_markup=ReplyKeyboardMarkup(
                [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return CHOOSE_EMPLOYEE_ID_FOR_CHECKLIST

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return ConversationHandler.END

async def choose_checklist_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        emp_id = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
        return CHOOSE_EMPLOYEE_ID_FOR_CHECKLIST

    context.user_data["checklist_employee_id"] = emp_id

    keyboard = ReplyKeyboardMarkup([
        ["daily", "weekly", "monthly"]
    ], resize_keyboard=True)
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫-–ª–∏—Å—Ç–∞:", reply_markup=keyboard)
    return CHOOSE_TYPE_FOR_CHECKLIST

async def enter_checklist_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    checklist_type = update.message.text.strip().lower()
    if checklist_type not in ["daily", "weekly", "monthly"]:
        await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ: daily, weekly –∏–ª–∏ monthly.")
        return CHOOSE_TYPE_FOR_CHECKLIST

    context.user_data["checklist_type"] = checklist_type
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return ENTER_DESCRIPTION_FOR_CHECKLIST


async def save_checklist_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text.strip()
    emp_id = context.user_data["checklist_employee_id"]
    checklist_type = context.user_data["checklist_type"]
    company_id = get_company_id(update.effective_user.id)

    try:
        with db_connect() as (conn, cursor):
            table = get_table("checklists", company_id)
            cursor.execute(f"""
                INSERT INTO {table} (employee_id, checklist_type, description)
                VALUES (%s, %s, %s)
            """, (emp_id, checklist_type, description))

        await update.message.reply_text(
            "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ–∫-–ª–∏—Å—Ç.",
            reply_markup=admin_submenu_keyboard("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã")
        )
        return ConversationHandler.END

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return ConversationHandler.END
        
    
async def cancel_add_checklist_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=admin_submenu_keyboard("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã", user_id=update.effective_user.id)
    )
    return ConversationHandler.END



async def admin_view_employees_checklists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            cursor.execute(
                f"SELECT id, name FROM {emp_table} ORDER BY name"
            )
            employees = cursor.fetchall()

        if not employees:
            await update.message.reply_text("‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç.")
            return

        text = "üë• *–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:*\n\n"
        for emp_id, emp_name in employees:
            text += f"üÜî ID: `{emp_id}` | üë§ {emp_name}\n"
        text += (
            "\nüì© –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "`/view_employee_checklists <ID>`"
        )
        await update.message.reply_text(text, parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def admin_view_employee_checklists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        emp_id = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/view_employee_checklists <ID>",
            parse_mode="Markdown"
        )
        return

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            checklists_table = get_table("checklists", company_id)
            completions_table = get_table("checklist_completions", company_id)

            cursor.execute(f"SELECT name FROM {emp_table} WHERE id = %s", (emp_id,))
            emp_row = cursor.fetchone()
            if not emp_row:
                await update.message.reply_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
                return
            emp_name = emp_row[0]

            cursor.execute(f"""
                SELECT
                  c.id,
                  c.checklist_type,
                  c.description,
                  IF(cc.completed IS NOT NULL, '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ') AS status
                FROM {checklists_table} c
                LEFT JOIN {completions_table} cc
                  ON c.id = cc.checklist_id
                  AND cc.completion_date = CURDATE()
                WHERE c.employee_id = %s
                ORDER BY c.checklist_type
            """, (emp_id,))
            checklists = cursor.fetchall()

        if not checklists:
            await update.message.reply_text("üì≠ –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")
            return

        text = f"üìù *–ß–µ–∫-–ª–∏—Å—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞* {emp_name}:\n"
        for cid, ctype, desc, status in checklists:
            text += (
                f"\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"‚îÇ üÜî `{cid}` | {ctype.capitalize()} ‚îÇ\n"
                f"üéØ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"\n"
                f"üìå –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"{desc}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
        await update.message.reply_text(text, parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")


async def cancel_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=admin_submenu_keyboard("üìù –ó–∞–¥–∞—á–∏", user_id=update.effective_user.id)
    )
    return ConversationHandler.END

async def view_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        with db_connect() as (conn, cursor):
            company_id = get_company_id(user_id)
            if not company_id:
                await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            emp_table   = get_table("employees", company_id)
            tasks_table = get_table("tasks", company_id)

            if is_company_admin(user_id):
                cursor.execute(f"""
                    SELECT t.id, e.name, t.description, t.deadline, t.completed
                    FROM {tasks_table} t
                    JOIN {emp_table} e ON t.employee_id = e.id
                    ORDER BY t.completed ASC, t.deadline ASC
                """)
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
                cursor.execute(
                    f"SELECT id FROM {emp_table} WHERE telegram_id = %s",
                    (user_id,)
                )
                row = cursor.fetchone()
                if not row:
                    await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return
                emp_id = row[0]

                cursor.execute(f"""
                    SELECT t.id, e.name, t.description, t.deadline, t.completed
                    FROM {tasks_table} t
                    JOIN {emp_table} e ON t.employee_id = e.id
                    WHERE e.id = %s
                    ORDER BY t.completed ASC, t.deadline ASC
                """, (emp_id,))

            tasks = cursor.fetchall()

        if not tasks:
            await update.message.reply_text("üì≠ –ó–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        
        text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n\n"
        for tid, name, desc, deadline, completed in tasks:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if completed else "‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            text += (
                f"‚Ä¢ *–ó–∞–¥–∞—á–∞* (ID: `{tid}`):\n"
                f"  ‚Ä¢ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* {name}\n"
                f"  ‚Ä¢ *–î–µ–¥–ª–∞–π–Ω:* {deadline}\n"
                f"  ‚Ä¢ *–°—Ç–∞—Ç—É—Å:* {status}\n"
                f"  ‚Ä¢ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n"
                f"    _{desc}_\n\n\n"
            )

        await update.message.reply_text(text, parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def checklist_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    emp_table = get_table("employees", company_id)
    checklists_table = get_table("checklists", company_id)
    completions_table = get_table("checklist_completions", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"""
                SELECT e.name, c.id, c.checklist_type, c.description,
                  COALESCE((
                    SELECT MAX(cc.completion_date)
                    FROM {completions_table} cc
                    WHERE cc.checklist_id = c.id AND cc.employee_id = e.id
                  ), NULL) AS last_completed_date
                FROM {checklists_table} c
                JOIN {emp_table} e ON c.employee_id = e.id
                ORDER BY e.name, c.checklist_type
            """)
            rows = cursor.fetchall()

        if not rows:
            await update.message.reply_text("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤.")
            return

        today = date.today()
        current_year, current_week = today.isocalendar()[0:2]

        report = "üìã *–û—Ç—á—ë—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —á–µ–∫-–ª–∏—Å—Ç–æ–≤:*\n\n"
        for name, checklist_id, checklist_type, description, last_completed in rows:
            if checklist_type == "daily":
                is_done = (last_completed == today)
            elif checklist_type == "weekly":
                is_done = (
                    last_completed
                    and date.fromisoformat(str(last_completed)).isocalendar()[1] == current_week
                )
            elif checklist_type == "monthly":
                is_done = (
                    last_completed
                    and last_completed.month == today.month
                    and last_completed.year == today.year
                )
            else:
                is_done = False

            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            last_str = last_completed.strftime("%Y-%m-%d") if last_completed else "‚Äî"
            report += (
                f"üë§ *{name}*\n"
                f"üî∏ –¢–∏–ø: {checklist_type} | üìå {description}\n"
                f"üéØ {status} | üóì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {last_str}\n\n"
            )

        await update.message.reply_text(report, parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")


async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    emp_table   = get_table("employees", company_id)
    tasks_table = get_table("tasks", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"SELECT id FROM {emp_table} WHERE telegram_id = %s", (user_id,))
            emp = cursor.fetchone()
            if not emp and not is_company_admin(user_id):
                await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            # –ë–µ—Ä—ë–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –≤—Å–µ—Ö, –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏)
            if is_company_admin(user_id):
                cursor.execute(f"""
                    SELECT t.id, e.name, t.description, t.deadline, t.completed
                    FROM {tasks_table} t
                    JOIN {emp_table} e ON t.employee_id = e.id
                    WHERE t.completed = 0
                    ORDER BY t.deadline ASC
                """)
            else:
                emp_id = emp[0]
                cursor.execute(f"""
                    SELECT t.id, e.name, t.description, t.deadline, t.completed
                    FROM {tasks_table} t
                    JOIN {emp_table} e ON t.employee_id = e.id
                    WHERE t.completed = 0 AND t.employee_id = %s
                    ORDER BY t.deadline ASC
                """, (emp_id,))

            tasks = cursor.fetchall()

        if not tasks:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        text = "üîß *–°–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:*\n\n"
        for tid, name, desc, deadline, completed in tasks:
            text += (
                f"‚Ä¢ *–ó–∞–¥–∞—á–∞* (ID: `{tid}`):\n"
                f"  ‚Ä¢ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* {name}\n"
                f"  ‚Ä¢ *–î–µ–¥–ª–∞–π–Ω:* {deadline}\n"
                f"  ‚Ä¢ *–°—Ç–∞—Ç—É—Å:* ‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n"
                f"  ‚Ä¢ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n"
                f"    _{desc}_\n\n\n"
            )

        text += "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ *ID* –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:"
        await update.message.reply_text(text, parse_mode="Markdown")

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∂–¥—ë–º –≤–≤–æ–¥–∞ ID
        context.user_data['awaiting_task_completion'] = {'company_id': company_id}

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def confirm_task_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'awaiting_task_completion' not in context.user_data:
        return  

    try:
        task_id = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏.")
        return

    company_id = context.user_data['awaiting_task_completion'].get("company_id")
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
        return

    tasks_table = get_table("tasks", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"SELECT id FROM {tasks_table} WHERE id = %s", (task_id,))
            if not cursor.fetchone():
                await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            cursor.execute(f"UPDATE {tasks_table} SET completed = 1 WHERE id = %s", (task_id,))

        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
    finally:
        context.user_data.pop('awaiting_task_completion', None)

async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    user_id = update.effective_user.id
    
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    emp_table = get_table("employees", company_id)
    bonuses_table = get_table("bonuses", company_id)
    attendance_table = get_table("attendance", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"""
                SELECT id, name, base_salary, work_hours_norm, overhour_rate, underhour_rate
                FROM {emp_table}
                WHERE telegram_id = %s
            """, (user_id,))
            row = cursor.fetchone()
            if not row:
                await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return

            emp_id, name, base_sal, norm_hours, over_rate, under_rate = row

            today = datetime.today()
            year, month = today.year, today.month

            cursor.execute(f"""
                SELECT IFNULL(SUM(duration_seconds), 0)
                FROM {attendance_table}
                WHERE employee_id = %s AND YEAR(start_time) = %s AND MONTH(start_time) = %s
            """, (emp_id, year, month))
            current_sec = cursor.fetchone()[0]

            cursor.execute(f"""
                SELECT IFNULL(SUM(bonus_amount), 0)
                FROM {bonuses_table}
                WHERE employee_id = %s AND YEAR(bonus_date) = %s AND MONTH(bonus_date) = %s
            """, (emp_id, year, month))
            bonus_total = cursor.fetchone()[0] or 0

            cursor.execute("""
                SELECT s.end_date
                FROM subscriptions s
                JOIN companies c ON c.id = s.company_id
                WHERE c.admin_id = %s AND s.status = 'active'
                ORDER BY s.end_date DESC
                LIMIT 1
            """, (user_id,))
            sub_row = cursor.fetchone()

        # 3) –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        current_hours = float(current_sec) / 3600.0  # <-- –∑–¥–µ—Å—å –ø—Ä–∏–≤–æ–¥–∏–º Decimal –∫ float
        salary = base_sal
        if current_hours > norm_hours:
            salary += (current_hours - norm_hours) * over_rate
        elif current_hours < norm_hours:
            salary -= (norm_hours - current_hours) * under_rate

        salary += float(bonus_total)
        salary = int(salary)

        # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
        if sub_row and sub_row[0]:
            end_date = sub_row[0]
            days_left = (end_date - date.today()).days
            sub_info = f"\n\nüóì –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {end_date}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
        else:
            sub_info = "\n\n‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞."

        # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        text = (
            f"üßë –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {name}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ {year}-{month:02d}: {salary} ‚ÇΩ"
        )
        await update.message.reply_text(text + sub_info)

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        



# 1) –ù–æ–≤—ã–π –∫–æ–ª–ª–±—ç–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤
async def notify_if_not_ended(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    attendance_id = data['attendance_id']
    company_id    = data['company_id']
    telegram_id   = data['telegram_id']

 
    attendance_table = get_table("attendance", company_id)
    with db_connect() as (conn, cursor):
        cursor.execute(
            f"SELECT end_time FROM {attendance_table} WHERE id = %s",
            (attendance_id,)
        )
        row = cursor.fetchone()


    if row and row[0] is None:
        await context.bot.send_message(
            chat_id=telegram_id,
            text='‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø —É—à–µ–ª", –µ—Å–ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É.'
        )



async def start_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    emp_table       = get_table("employees", company_id)
    attendance_table= get_table("attendance", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                f"SELECT id FROM {attendance_table} WHERE employee_id = %s AND end_time IS NULL",
                (context.user_data.get('emp_id', None),)
            )
            if cursor.fetchone():
                await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∫–∞–∫ –ø—Ä–∏—à–µ–¥—à–∏–π!")
                return

            now = datetime.now()
            cursor.execute(
                f"INSERT INTO {attendance_table} (employee_id, start_time) VALUES (%s, %s)",
                (context.user_data['emp_id'], now)
            )
            attendance_id = cursor.lastrowid

        context.job_queue.run_once(
            notify_if_not_ended,
            when=8 * 3600,
            name=f"shift_reminder_{attendance_id}",
            data={
                'attendance_id': attendance_id,
                'company_id': company_id,
                'telegram_id': user_id
            }
        )

        await update.message.reply_text("‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∫–∞–∫ –ø—Ä–∏—à–µ–¥—à–∏–π –Ω–∞ —Ä–∞–±–æ—Ç—É!")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")


async def end_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    attendance_table = get_table("attendance", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"""
                SELECT id, start_time
                FROM {attendance_table}
                WHERE employee_id = %s AND end_time IS NULL
                ORDER BY id DESC
                LIMIT 1
            """, (context.user_data.get('emp_id', None),))
            shift = cursor.fetchone()
            if not shift:
                await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
                return

            attendance_id, start_time = shift

            for job in context.job_queue.get_jobs_by_name(f"shift_reminder_{attendance_id}"):
                job.schedule_removal()

            now = datetime.now()
            duration_sec = int((now - start_time).total_seconds())
            cursor.execute(f"""
                UPDATE {attendance_table}
                SET end_time = %s, duration_seconds = %s
                WHERE id = %s
            """, (now, duration_sec, attendance_id))

        await update.message.reply_text(
            f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∫–∞–∫ —É—à–µ–¥—à–∏–π! –°–µ—Å—Å–∏—è: {duration_sec} —Å (~{duration_sec/3600:.2f} —á)."
        )

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def my_full_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    emp_table = get_table("employees", company_id)
    attendance_table = get_table("attendance", company_id)
    bonuses_table = get_table("bonuses", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"""
                SELECT id, base_salary, work_hours_norm, overhour_rate, underhour_rate
                FROM {emp_table}
                WHERE telegram_id = %s
            """, (user_id,))
            row = cursor.fetchone()
            if not row:
                await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            emp_id, base_sal, norm_hours, over_rate, under_rate = row

            cursor.execute(f"""
                SELECT IFNULL(SUM(duration_seconds), 0)
                FROM {attendance_table}
                WHERE employee_id = %s
            """, (emp_id,))
            total_sec = cursor.fetchone()[0]
            total_hours = total_sec / 3600.0

            cursor.execute(f"""
                SELECT IFNULL(SUM(bonus_amount), 0)
                FROM {bonuses_table}
                WHERE employee_id = %s
            """, (emp_id,))
            cumulative_bonus = float(cursor.fetchone()[0])

        if total_hours > norm_hours:
            final_salary = base_sal + (total_hours - norm_hours) * over_rate
        elif total_hours < norm_hours:
            final_salary = base_sal - (norm_hours - total_hours) * under_rate
        else:
            final_salary = base_sal

        final_salary += cumulative_bonus
        final_salary = int(final_salary)

        await update.message.reply_text(
            f"üë§ –í–∞—à–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã: {total_hours:.2f}\n"
            f"–ù–æ—Ä–º–∞ —á–∞—Å–æ–≤: {norm_hours} —á.\n"
            f"–û–∫–ª–∞–¥: {base_sal} —Ä—É–±.\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {final_salary} —Ä—É–±."
        )

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def my_visits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π (–¥–∞—Ç–∞ ‚Üí —á–∞—Å—ã) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    emp_table = get_table("employees", company_id)
    attendance_table = get_table("attendance", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                f"SELECT id FROM {emp_table} WHERE telegram_id = %s",
                (user_id,)
            )
            row = cursor.fetchone()
            if not row:
                await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            emp_id = row[0]

            cursor.execute(f"""
                SELECT DATE(start_time) AS visit_date,
                       SUM(duration_seconds) AS total_seconds
                FROM {attendance_table}
                WHERE employee_id = %s
                GROUP BY DATE(start_time)
                ORDER BY DATE(start_time) DESC
            """, (emp_id,))
            visits = cursor.fetchall()

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return

    if not visits:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π.")
        return

    text = "üìÖ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π:\n"
    for visit_date, total_seconds in visits:
        hours = float(total_seconds) / 3600.0
        text += f"{visit_date}: {hours:.2f} —á.\n"

    await update.message.reply_text(text)

async def my_salaries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ.
    """
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    emp_table = get_table("employees", company_id)
    attendance_table = get_table("attendance", company_id)
    bonuses_table = get_table("bonuses", company_id)

    try:
        with db_connect() as (conn, cursor):
            cursor.execute(
                f"""
                SELECT id, base_salary, work_hours_norm, overhour_rate, underhour_rate
                FROM {emp_table}
                WHERE telegram_id = %s
                """,
                (user_id,)
            )
            row = cursor.fetchone()
            if not row:
                await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            emp_id, base_sal, norm_hours, over_rate, under_rate = row

            cursor.execute(
                f"""
                SELECT YEAR(start_time) AS yr,
                       MONTH(start_time) AS mth,
                       SUM(duration_seconds) AS total_sec
                FROM {attendance_table}
                WHERE employee_id = %s
                GROUP BY yr, mth
                ORDER BY yr DESC, mth DESC
                """,
                (emp_id,)
            )
            months = cursor.fetchall()

        if not months:
            await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ.")
            return

        report = ["üìä *–ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º:*"]
        for yr, mth, total_sec in months:
            hours = float(total_sec) / 3600.0

            salary = base_sal
            if hours > norm_hours:
                salary += (hours - norm_hours) * over_rate
            elif hours < norm_hours:
                salary -= (norm_hours - hours) * under_rate

            with db_connect() as (conn2, cur2):
                cur2.execute(
                    f"""
                    SELECT IFNULL(SUM(bonus_amount), 0)
                    FROM {bonuses_table}
                    WHERE employee_id = %s
                      AND YEAR(bonus_date) = %s
                      AND MONTH(bonus_date) = %s
                    """,
                    (emp_id, yr, mth)
                )
                bonus_total = cur2.fetchone()[0] or 0

            salary += bonus_total
            report.append(f"{yr}-{mth:02d}: {hours:.2f} —á. ‚Üí {int(salary)} —Ä—É–±.")

        await update.message.reply_text("\n".join(report), parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def set_salary_and_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    args = context.args or []
    if len(args) != 3:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/set_salary_and_hours <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞> <–æ–∫–ª–∞–¥> <–Ω–æ—Ä–º–∞ —á–∞—Å–æ–≤>"
        )
        return

    try:
        employee_id     = int(args[0])
        base_salary     = int(args[1])
        work_hours_norm = float(args[2])
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ <>:\n"
            "/set_salary_and_hours <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞> <–æ–∫–ª–∞–¥> <–Ω–æ—Ä–º–∞ —á–∞—Å–æ–≤>"
        )
        return

    admin_id   = update.effective_user.id
    company_id = get_company_id(admin_id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            cursor.execute(
                f"""
                UPDATE {emp_table}
                   SET base_salary = %s,
                       work_hours_norm = %s
                 WHERE id = %s
                """,
                (base_salary, work_hours_norm, employee_id)
            )
        await update.message.reply_text(
            f"‚úÖ –û–∫–ª–∞–¥ ({base_salary}‚ÇΩ) –∏ –Ω–æ—Ä–º–∞ ({work_hours_norm} —á) "
            f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID {employee_id}."
        )
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def show_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {user_id}")

async def salary_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    emp_table       = get_table("employees", company_id)
    attendance_table= get_table("attendance", company_id)
    bonuses_table   = get_table("bonuses", company_id)

    today         = datetime.today()
    current_year  = today.year
    current_month = today.month

    try:
        report_text = "üìä *–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü):*\n\n"
        with db_connect() as (conn, cursor):
            cursor.execute(f"""
                SELECT id, name, base_salary, work_hours_norm, overhour_rate, underhour_rate
                FROM {emp_table}
            """)
            employees = cursor.fetchall()

            if not employees:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            for emp_id, name, base_salary, norm_hours, over_rate, under_rate in employees:
                cursor.execute(f"""
                    SELECT IFNULL(SUM(duration_seconds), 0)
                    FROM {attendance_table}
                    WHERE employee_id = %s
                      AND YEAR(start_time)  = %s
                      AND MONTH(start_time) = %s
                """, (emp_id, current_year, current_month))
                row = cursor.fetchone()
                total_sec = row[0] if row else 0

                total_hours = float(total_sec) / 3600.0

                if total_hours > norm_hours:
                    salary = base_salary + (total_hours - norm_hours) * over_rate
                elif total_hours < norm_hours:
                    salary = base_salary - (norm_hours - total_hours) * under_rate
                else:
                    salary = base_salary

                cursor.execute(f"""
                    SELECT IFNULL(SUM(bonus_amount), 0)
                    FROM {bonuses_table}
                    WHERE employee_id = %s
                      AND YEAR(bonus_date)  = %s
                      AND MONTH(bonus_date) = %s
                """, (emp_id, current_year, current_month))
                bonus_row = cursor.fetchone()
                bonus = float(bonus_row[0]) if bonus_row and bonus_row[0] is not None else 0

                salary += bonus

                report_text += (
                    f"üë§ *ID:* {emp_id} | *–ò–º—è:* {name}\n"
                    f"üïí –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours:.2f} —á. | üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {int(salary)} —Ä—É–±.\n\n"
                )

        await update.message.reply_text(report_text, parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def view_attendance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view_attendance <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞>
    """
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/view_attendance <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞>"
        )
        return

    emp_id = int(context.args[0])

    try:
        with db_connect() as (conn, cursor):
            emp_table        = get_table("employees", company_id)
            attendance_table = get_table("attendance", company_id)

            cursor.execute(
                f"SELECT name FROM {emp_table} WHERE id = %s",
                (emp_id,)
            )
            row = cursor.fetchone()
            if not row:
                await update.message.reply_text(
                    "‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
                )
                return
            emp_name = row[0]

            cursor.execute(f"""
                SELECT DATE(start_time), SUM(duration_seconds)
                FROM {attendance_table}
                WHERE employee_id = %s
                GROUP BY DATE(start_time)
                ORDER BY DATE(start_time) DESC
            """, (emp_id,))
            records = cursor.fetchall()

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {err}")
        return

    if not records:
        await update.message.reply_text(f"üì≠ –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {emp_name} –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π.")
        return

    text = f"üìÖ –ü–æ—Å–µ—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ *{emp_name}* (ID: {emp_id}):\n\n"
    for day, seconds in records:
        hours = float(seconds) / 3600.0
        text += f"{day}: {hours:.2f} —á.\n"

    await update.message.reply_text(text, parse_mode="Markdown")


async def delete_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Ç–∫—É - —É–≤–æ–ª–µ–Ω :\n"
            "/delete_employee <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞>\n"
            "\n"
            " ‚ùå–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–µ—Ä–µ—Ç—å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü:\n"
            "/purge_employee <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞>"
        )
        return

    emp_id = int(context.args[0])

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)

            cursor.execute(
                f"SELECT name FROM {emp_table} WHERE id = %s",
                (emp_id,)
            )
            row = cursor.fetchone()
            if not row:
                await update.message.reply_text("‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            emp_name = row[0]

            if "–£–≤–æ–ª–µ–Ω" in emp_name:
                await update.message.reply_text("‚ÑπÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —É–≤–æ–ª–µ–Ω.")
                return

            new_name = emp_name + " (–£–≤–æ–ª–µ–Ω)"
            cursor.execute(
                f"UPDATE {emp_table} SET name = %s WHERE id = %s",
                (new_name, emp_id)
            )

        await update.message.reply_text(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {emp_name} —É—Å–ø–µ—à–Ω–æ —É–≤–æ–ª–µ–Ω.")
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {err}")


async def award_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
 
    if not context.args or len(context.args) != 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/award_bonus <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞> <—Å—É–º–º–∞ –ø—Ä–µ–º–∏–∏>"
        )
        return

    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        emp_id = int(context.args[0])
        bonus_amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –û–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    today = datetime.today().date()

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            cursor.execute(
                f"SELECT id FROM {emp_table} WHERE id = %s",
                (emp_id,)
            )
            if not cursor.fetchone():
                await update.message.reply_text(f"‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {emp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            bonuses_table = get_table("bonuses", company_id)
            cursor.execute(
                f"""
                INSERT INTO {bonuses_table}
                  (employee_id, bonus_amount, bonus_date)
                VALUES (%s, %s, %s)
                """,
                (emp_id, bonus_amount, today)
            )

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–µ–º–∏—è {bonus_amount} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {emp_id}."
        )

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {err}")


async def assign_penalty(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if not context.args or len(context.args) != 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/assign_penalty <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞> <—Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞>"
        )
        return

 
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    
    try:
        emp_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –û–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    today = datetime.today().date()

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            cursor.execute(
                f"SELECT id FROM {emp_table} WHERE id = %s",
                (emp_id,)
            )
            if not cursor.fetchone():
                await update.message.reply_text(f"‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {emp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            bonuses_table = get_table("bonuses", company_id)
            cursor.execute(
                f"""
                INSERT INTO {bonuses_table}
                  (employee_id, bonus_amount, bonus_date)
                VALUES (%s, %s, %s)
                """,
                (emp_id, -abs(amount), today)
            )

        await update.message.reply_text(
            f"‚úÖ –®—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {emp_id}."
        )

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {err}")


CHOOSE_TYPE    = 20
ENTER_QUANTITY = 21
CONFIRM_MORE   = 22


def ensure_collection_items_table_exists(company_id):
    """
    –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ —Å–±–æ—Ä–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –µ—ë.
    """
    table_name = get_table("collection_items", company_id)
    with db_connect() as (conn, cursor):
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS {table_name} (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(100) NOT NULL UNIQUE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

def get_dynamic_collection_keyboard(company_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Å–±–æ—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–∏–ø–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
    """
    ensure_collection_items_table_exists(company_id)  

   
    with db_connect() as (conn, cursor):
        table = get_table("collection_items", company_id)
        cursor.execute(f"SELECT name FROM {table}")
        items = [row[0] for row in cursor.fetchall()]

   
    buttons = [KeyboardButton(item) for item in items]
    rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    rows.append([KeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)



async def start_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    emp_table = get_table("employees", company_id)

 
    with db_connect() as (conn, cursor):
        cursor.execute(
            f"SELECT id FROM {emp_table} WHERE telegram_id = %s",
            (user_id,)
        )
        row = cursor.fetchone()

    if not row:
        await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END

    emp_id = row[0]
    context.user_data['emp_id'] = emp_id
    context.user_data['company_id'] = company_id

    await update.message.reply_text(
        "üì¶ –ß—Ç–æ –≤—ã —Å–æ–±—Ä–∞–ª–∏? –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=get_dynamic_collection_keyboard(company_id)
    )
    return CHOOSE_TYPE


async def choose_collection_type(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if update.message.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await confirm_more(update, context)


    context.user_data['collection_type'] = update.message.text
    await update.message.reply_text("üìù –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Å–æ–±—Ä–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    return ENTER_QUANTITY
    


async def enter_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        qty = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ENTER_QUANTITY  

    emp_id = context.user_data.get('emp_id')
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not emp_id or not company_id:
        await update.message.reply_text("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return ConversationHandler.END

    item = context.user_data['collection_type']
    table = get_table("collections", company_id)

  
    with db_connect() as (conn, cursor):
        cursor.execute(f"""
            INSERT INTO {table}
              (employee_id, collection_date, item_type, quantity)
            VALUES (%s, CURDATE(), %s, %s)
        """, (emp_id, item, qty))

    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {qty} √ó {item}.\n–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
    )
    return CONFIRM_MORE


async def confirm_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–î–∞":
        return await start_collection(update, context)
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard(update.effective_user.id)
    )
    return ConversationHandler.END



async def my_collections_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    with db_connect() as (conn, cursor):
        emp_table = get_table("employees", company_id)
        cursor.execute(f"SELECT id FROM {emp_table} WHERE telegram_id = %s", (user_id,))
        row = cursor.fetchone()
        if not row:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            )
            return
        emp_id = row[0]

        # 3) –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        coll_table = get_table("collections", company_id)
        cursor.execute(f"""
            SELECT item_type, SUM(quantity)
            FROM {coll_table}
            WHERE employee_id = %s AND collection_date = CURDATE()
            GROUP BY item_type
        """, (emp_id,))
        rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")
        return

    text = "üìÖ –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–æ–±—Ä–∞–ª–∏:\n"
    for item, total in rows:
        text += f"‚Ä¢ {item}: {total}\n"
    await update.message.reply_text(text)


async def my_collections_avg(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id
    company_id = get_company_id(user_id)
    if not company_id:
        await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    with db_connect() as (conn, cursor):
        emp_table = get_table("employees", company_id)
        cursor.execute(f"SELECT id FROM {emp_table} WHERE telegram_id = %s", (user_id,))
        row = cursor.fetchone()
        if not row:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            )
            return
        emp_id = row[0]

        coll_table = get_table("collections", company_id)
        cursor.execute(f"""
            SELECT
              item_type,
              SUM(quantity)    AS total,
              COUNT(DISTINCT collection_date) AS days
            FROM {coll_table}
            WHERE employee_id = %s
              AND YEAR(collection_date)  = YEAR(CURDATE())
              AND MONTH(collection_date) = MONTH(CURDATE())
            GROUP BY item_type
        """, (emp_id,))
        results = cursor.fetchall()

    if not results:
        await update.message.reply_text("üì≠ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–±–æ—Ä–∞—Ö.")
        return

    text = "üìä –°—Ä–µ–¥–Ω—è—è —Å–±–æ—Ä–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n"
    for item, total, days in results:
        average = total / days if days else 0
        text += f"‚Ä¢ {item}: {total} —à—Ç. –∑–∞ {days} –¥–Ω. ‚Üí —Å—Ä–µ–¥–Ω–µ–µ: {average:.2f} —à—Ç./–¥–µ–Ω—å\n"
    await update.message.reply_text(text)

def create_company_tables(company_id):
    
    with db_connect() as (conn, cursor):
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_employees (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                name TEXT NOT NULL,
                telegram_id BIGINT UNIQUE,
                salary DOUBLE DEFAULT 0,
                base_salary INT DEFAULT 60000,
                work_hours_norm INT DEFAULT 40,
                overhour_rate INT DEFAULT 500,
                underhour_rate INT DEFAULT 500
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_tasks (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                employee_id BIGINT UNSIGNED,
                description TEXT NOT NULL,
                deadline DATE,
                completed TINYINT(1) DEFAULT 0,
                FOREIGN KEY (employee_id)
                  REFERENCES company_{company_id}_employees(id)
                  ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_attendance (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                employee_id BIGINT UNSIGNED,
                start_time DATETIME NOT NULL,
                end_time DATETIME,
                duration_seconds INT DEFAULT 0,
                FOREIGN KEY (employee_id)
                  REFERENCES company_{company_id}_employees(id)
                  ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –±–æ–Ω—É—Å–æ–≤
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_bonuses (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                employee_id BIGINT UNSIGNED,
                bonus_amount INT NOT NULL,
                bonus_date DATE NOT NULL,
                FOREIGN KEY (employee_id)
                  REFERENCES company_{company_id}_employees(id)
                  ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

        # –¢–∞–±–ª–∏—Ü–∞ —Å–±–æ—Ä–æ–≤
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_collections (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                employee_id BIGINT UNSIGNED,
                collection_date DATE NOT NULL,
                item_type VARCHAR(50) NOT NULL,
                quantity INT NOT NULL,
                FOREIGN KEY (employee_id)
                  REFERENCES company_{company_id}_employees(id)
                  ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_collection_items (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(100) NOT NULL UNIQUE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

        # –¢–∞–±–ª–∏—Ü–∞ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_checklists (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                employee_id BIGINT UNSIGNED,
                checklist_type ENUM('daily','weekly','monthly') NOT NULL,
                description VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (employee_id)
                  REFERENCES company_{company_id}_employees(id)
                  ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS company_{company_id}_checklist_completions (
                id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                checklist_id BIGINT UNSIGNED,
                employee_id BIGINT UNSIGNED,
                completion_date DATE NOT NULL,
                completed TINYINT(1) DEFAULT 0,
                FOREIGN KEY (checklist_id)
                  REFERENCES company_{company_id}_checklists(id)
                  ON DELETE CASCADE,
                FOREIGN KEY (employee_id)
                  REFERENCES company_{company_id}_employees(id)
                  ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """)


async def my_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üíº *–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏.*\n\n"
        "üîê *–ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ —É—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç\n"
        "‚Ä¢ –ø–æ—Å–µ—â–µ–Ω–∏—è\n"
        "‚Ä¢ —Å–±–æ—Ä–∫–∞\n"
        "‚Ä¢ –∑–∞–¥–∞—á–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç—ã\n\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: *290‚ÇΩ –Ω–∞ 30 –¥–Ω–µ–π*.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="start_payment")]
    ])
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: CallbackQuery = update.callback_query
    await query.answer()
    print("handle_callback –≤—ã–∑–≤–∞–Ω —Å:", query.data)

    if query.data == "start_payment":
        await pay_subscription(update, context)


async def collections_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        company_id = get_company_id(user_id)
        if not company_id:
            await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        emp_table = get_table("employees", company_id)
        collections_table = get_table("collections", company_id)

        report = "üì¶ *–û—Ç—á—ë—Ç –ø–æ —Å–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤:*\n\n"
        with db_connect() as (conn, cursor):
            cursor.execute(f"SELECT id, name FROM {emp_table} ORDER BY name")
            employees = cursor.fetchall()
            if not employees:
                await update.message.reply_text("‚ö†Ô∏è –í –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
                return

            for emp_id, name in employees:
                cursor.execute(f"""
                    SELECT DATE(collection_date), SUM(quantity)
                    FROM {collections_table}
                    WHERE employee_id = %s
                      AND MONTH(collection_date) = MONTH(CURDATE())
                      AND YEAR(collection_date) = YEAR(CURDATE())
                    GROUP BY DATE(collection_date)
                    ORDER BY DATE(collection_date)
                """, (emp_id,))
                days = cursor.fetchall()
                if not days:
                    continue

                report += f"üë§ {name}\n"
                for d, amount in days:
                    report += f"   üìÖ {d}: {amount} —à—Ç.\n"
                report += "\n"

        if report.strip() == "üì¶ *–û—Ç—á—ë—Ç –ø–æ —Å–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤:*":
            report += "\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–±–æ—Ä–∞—Ö."

        await update.message.reply_text(report, parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")


async def collections_avg_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        company_id = get_company_id(user_id)
        if not company_id:
            await update.message.reply_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        emp_table = get_table("employees", company_id)
        collections_table = get_table("collections", company_id)

        report = "üìä *–°—Ä–µ–¥–Ω—è—è —Å–±–æ—Ä–∫–∞ –∑–∞ –º–µ—Å—è—Ü –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:*\n\n"
        with db_connect() as (conn, cursor):
            cursor.execute(f"SELECT id, name FROM {emp_table}")
            employees = cursor.fetchall()
            if not employees:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
                return

            for emp_id, name in employees:
                cursor.execute(f"""
                    SELECT item_type, SUM(quantity) AS total, COUNT(DISTINCT collection_date) AS days
                    FROM {collections_table}
                    WHERE employee_id = %s
                      AND MONTH(collection_date) = MONTH(CURDATE())
                      AND YEAR(collection_date) = YEAR(CURDATE())
                    GROUP BY item_type
                """, (emp_id,))
                items = cursor.fetchall()
                if not items:
                    continue

                report += f"üë§ *{name}*\n"
                for item, total, days in items:
                    avg = total / days if days else 0
                    report += f"‚Ä¢ {item}: {total} —à—Ç. –∑–∞ {days} –¥–Ω. ‚Üí —Å—Ä–µ–¥–Ω–µ–µ: {avg:.2f} —à—Ç./–¥–µ–Ω—å\n"
                report += "\n"

        await update.message.reply_text(report, parse_mode="Markdown")

    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")



async def add_item_type(update: Update, context: ContextTypes.DEFAULT_TYPE):

    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_item_type <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>")
        return

    name = " ".join(context.args).strip()
    if not name:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    try:
        table = get_table("collection_items", company_id)
        with db_connect() as (conn, cursor):
            cursor.execute(
                f"INSERT IGNORE INTO {table} (name) VALUES (%s)",
                (name,)
            )
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–ø —Å–±–æ—Ä–∞: {name}")
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")


async def delete_item_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    company_id = get_company_id(update.effective_user.id)
    if not company_id:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_item_type <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>")
        return

    name = " ".join(context.args).strip()
    if not name:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    table = get_table("collection_items", company_id)
    try:
        with db_connect() as (conn, cursor):
            cursor.execute(f"DELETE FROM {table} WHERE name = %s", (name,))
            if cursor.rowcount:
                await update.message.reply_text(f"‚úÖ –¢–∏–ø —Å–±–æ—Ä–∫–∏ ¬´{name}¬ª —É–¥–∞–ª—ë–Ω.")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –¢–∏–ø ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

async def prompt_delete_item_simple(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
        "/delete_item_type <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>"
    )



async def delete_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_company_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/delete_company <ID –∫–æ–º–ø–∞–Ω–∏–∏>")
        return
    company_id = int(context.args[0])

    try:
        with db_connect() as (conn, cursor):
            cursor.execute("SET FOREIGN_KEY_CHECKS = 0;")

            for suffix in [
                "checklist_completions",
                "checklists",
                "tasks",
                "attendance",
                "bonuses",
                "collections",
                "collection_items"
            ]:
                tbl = f"company_{company_id}_{suffix}"
                cursor.execute(f"DROP TABLE IF EXISTS `{tbl}`;")

            cursor.execute("DELETE FROM subscriptions WHERE company_id = %s;", (company_id,))
            cursor.execute("DELETE FROM companies WHERE id = %s;", (company_id,))

            cursor.execute("SET FOREIGN_KEY_CHECKS = 1;")

        await update.message.reply_text(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id} —É–¥–∞–ª–µ–Ω—ã.")
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {err}")






async def purge_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id

    company_id = get_company_id(admin_id)
    if not company_id or admin_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    if len(context.args) < 1 or not context.args[0].isdigit():
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/purge_employee <ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞> [yes]")
        return
    emp_id = int(context.args[0])

    if len(context.args) < 2 or context.args[1].lower() != "yes":
        await update.message.reply_text(
            f"‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {emp_id}.\n\n"
            f"–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n"
            f"/purge_employee {emp_id} yes"
        )
        return

    try:
        with db_connect() as (conn, cursor):
            emp_table = get_table("employees", company_id)
            cursor.execute(f"DELETE FROM `{emp_table}` WHERE id = %s", (emp_id,))
        await update.message.reply_text(
            f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {emp_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}."
        )
    except mysql.connector.Error as err:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {err}")


async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\n"
        "üëâ [@art_ooi](https://t.me/art_ooi)",
        parse_mode="Markdown"
    )

async def stocks_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –≤–∞—à–∏ –∫–∞–±–∏–Ω–µ—Ç—ã –≤ –æ–¥–∏–Ω —É–¥–æ–±–Ω—ã–π Excel —Ñ–∞–π–ª:\n"
        "üëâ [@stocks_wildberries_bot](https://t.me/stocks_wildberries_bot)",
        parse_mode="Markdown"
    )

async def start_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with db_connect() as (conn, cursor):
        # –°—Ç–∞—Ä—Ç
        cursor.execute("SELECT COUNT(*) FROM start_clicks")
        total_start = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM start_clicks WHERE clicked_at >= CURDATE()")
        today_start = cursor.fetchone()[0]
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
        cursor.execute("SELECT COUNT(*) FROM company_register_clicks")
        total_reg = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM company_register_clicks WHERE clicked_at >= CURDATE()")
        today_reg = cursor.fetchone()[0]
        # –í–æ–π—Ç–∏
        cursor.execute("SELECT COUNT(*) FROM login_clicks")
        total_login = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM login_clicks WHERE clicked_at >= CURDATE()")
        today_login = cursor.fetchone()[0]
        # –ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç
        cursor.execute("SELECT COUNT(*) FROM features_clicks")
        total_feat = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM features_clicks WHERE clicked_at >= CURDATE()")
        today_feat = cursor.fetchone()[0]

    await update.message.reply_text(
        f"üóì –ó–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"‚Ä¢ –°—Ç–∞—Ä—Ç: {today_start}\n"
        f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {today_reg}\n"
        f"‚Ä¢ –í–æ–π—Ç–∏: {today_login}\n"
        f"‚Ä¢ –ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç: {today_feat}\n\n"
        f"üìä –í—Å–µ–≥–æ:\n"
        f"‚Ä¢ –°—Ç–∞—Ä—Ç: {total_start}\n"
        f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {total_reg}\n"
        f"‚Ä¢ –í–æ–π—Ç–∏: {total_login}\n"
        f"‚Ä¢ –ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç: {total_feat}"
    )



if __name__ == '__main__':
    try:
        app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

        

        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        conv_handler_add_task = ConversationHandler(
    entry_points=[CommandHandler("add_task", add_task),
        MessageHandler(filters.Regex(r"^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task)
    ],
    states={
        SET_TASK_DESCRIPTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_task_description)
        ],
        HANDLE_DEADLINE_BUTTON: [
            CallbackQueryHandler(handle_deadline_button, pattern=r"^deadline_")
        ],
        SET_TASK_DEADLINE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_date_input)
        ],
        HANDLE_EMPLOYEE_BUTTON: [
            CallbackQueryHandler(handle_employee_button, pattern=r"^task_emp_")
        ],
    },
    fallbacks=[
        MessageHandler(filters.Regex(r"^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), cancel_add_task)
    ],
    
)

        
        conv_handler_register_employee = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & filters.Regex('^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$'), register_employee_start)],
            states={
                EMPLOYEE_REGISTRATION_COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_employee_company)]
            },
            fallbacks=[]
        )

        
        conv_handler_register_company = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & filters.Regex(r'^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏$'), register_company)],
            states={
                1: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_company)]
            },
            fallbacks=[]
        )

        # ConversationHandler –¥–ª—è –º–û–ô –°–ë–û–†
        conv_collections = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üì¶ –ú–æ–π —Å–±–æ—Ä$"), start_collection)],
    states={
        CHOOSE_TYPE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_collection_type)],
        ENTER_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_quantity)],
        CONFIRM_MORE:   [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), confirm_more)],
    },
    fallbacks=[]
)
        conv_add_checklist_task = ConversationHandler(
            
    entry_points=[
        MessageHandler(filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —á–µ–∫-–ª–∏—Å—Ç$'), start_add_checklist_task)
    ],
    states={
        CHOOSE_EMPLOYEE_ID_FOR_CHECKLIST: [
            # —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ ‚Äî –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É–π–¥—ë—Ç –≤ fallback
            MessageHandler(filters.Regex(r'^\d+$'), choose_checklist_type)
        ],
        CHOOSE_TYPE_FOR_CHECKLIST: [
            # —Ç–æ–ª—å–∫–æ daily, weekly –∏–ª–∏ monthly
            MessageHandler(filters.Regex(TYPE_PATTERN), enter_checklist_description)
        ],
        ENTER_DESCRIPTION_FOR_CHECKLIST: [
            # –ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª)
            MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(r'^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$'), save_checklist_task)
        ],
    },
    fallbacks=[
        # –ø—Ä–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –≤–≤–æ–¥–∞—Ö (¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª, ¬´üì¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å¬ª –∏ —Ç.–ø.)
        MessageHandler(filters.Regex(r'^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$'), cancel_add_checklist_task)
    ]
)

        
        app.add_handler(CommandHandler("collections_report", collections_report))
        app.add_handler(CommandHandler("my_collections_today", my_collections_today))
        app.add_handler(CommandHandler("my_collections_avg", my_collections_avg))
        app.add_handler(CommandHandler("collections_avg_report", collections_avg_report))
        app.add_handler(CommandHandler("add_item_type", add_item_type))
        app.add_handler(MessageHandler(filters.Regex("^üì¶ –ú–æ–π —Å–±–æ—Ä –∑–∞ –¥–µ–Ω—å$"), my_collections_today))
        app.add_handler(MessageHandler(filters.Regex("^üì¶ –ú–æ–π —Å–±–æ—Ä –∑–∞ –º–µ—Å—è—Ü$"), my_collections_avg))
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üè† –°—Ç–∞—Ä—Ç$'), start))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–í–æ–π—Ç–∏$'), login))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$'), my_profile))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üìë –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏$'), view_tasks))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üò§ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É$'), complete_task))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üí∏ –ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞$'), my_profile))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–Ø –ø—Ä–∏—à–µ–ª$'), start_shift))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–Ø —É—à–µ–ª$'), end_shift))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–ú–æ–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è$'), my_visits))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–ú–æ–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã$'), my_salaries))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üëë –ê–¥–º–∏–Ω$'), admin_commands))
        app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üìã –ú–æ–∏ —á–µ–∫–ª–∏—Å—Ç—ã$'), view_checklists))
        app.add_handler(MessageHandler(filters.Regex("^üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–±–æ—Ä$"), my_collections_today))
        app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –º–µ—Å—è—Ü$"), my_collections_avg))
        app.add_handler(MessageHandler(filters.Regex("^üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏$"), handle_admin_section))
        app.add_handler(MessageHandler(filters.Regex("^üìù –ó–∞–¥–∞—á–∏$"), handle_admin_section))
        app.add_handler(MessageHandler(filters.Regex("^‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã$"), handle_admin_section))
        app.add_handler(MessageHandler(filters.Regex("^üìä –ó–∞—Ä–ø–ª–∞—Ç—ã –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è$"), handle_admin_section))
        app.add_handler(MessageHandler(filters.Regex("^üí∞ –ü—Ä–µ–º–∏–∏ –∏ —à—Ç—Ä–∞—Ñ—ã$"), handle_admin_section))
        app.add_handler(MessageHandler(filters.Regex("^üì¶ –°–±–æ—Ä–∫–∞$"), handle_admin_section))
        app.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞$"), handle_admin_section))
        
    
       

        # üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        
        app.add_handler(MessageHandler(filters.Regex("^‚ùå –£–≤–æ–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$"), delete_employee))
        app.add_handler(MessageHandler(filters.Regex("^üëÅ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤$"), admin_view_employees))

# üìù –ó–∞–¥–∞—á–∏
        
        app.add_handler(MessageHandler(filters.Regex("^üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏$"), view_tasks))
        app.add_handler(MessageHandler(filters.Regex("^‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π$"), complete_task))

# ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã
        app.add_handler(MessageHandler(filters.Regex("^üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫-–ª–∏—Å—Ç–æ–≤$"), admin_view_employees_checklists))
        app.add_handler(MessageHandler(filters.Regex("^‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç$"), view_checklists))


# üìä –ó–∞—Ä–ø–ª–∞—Ç—ã –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
        app.add_handler(MessageHandler(filters.Regex("^üìà –û—Ç—á—ë—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ$"), salary_report))
        app.add_handler(MessageHandler(filters.Regex("^üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$"), view_attendance))
        app.add_handler(MessageHandler(filters.Regex("^üõ† –û–∫–ª–∞–¥ –∏ –Ω–æ—Ä–º–∞$"), set_salary_and_hours))  # —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π handler —Å –º–µ–Ω—é

# üí∞ –ü—Ä–µ–º–∏–∏ –∏ —à—Ç—Ä–∞—Ñ—ã
        app.add_handler(MessageHandler(filters.Regex("^üéÅ –ü—Ä–µ–º–∏—è$"), award_bonus))
        app.add_handler(MessageHandler(filters.Regex("^‚ö†Ô∏è –®—Ç—Ä–∞—Ñ$"), assign_penalty))

# üì¶ –°–±–æ—Ä–∫–∞
        app.add_handler(MessageHandler(filters.Regex("^üìã –û—Ç—á—ë—Ç –ø–æ —Å–±–æ—Ä–∫–µ$"), collections_report))
        app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ä–µ–¥–Ω—è—è —Å–±–æ—Ä–∫–∞$"), collections_avg_report))
        app.add_handler(MessageHandler(filters.Regex("^‚ûï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä$"), add_item_type))

# ‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞
        app.add_handler(MessageHandler(filters.Regex("^üè¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é$"), register_company))
        app.add_handler(MessageHandler(filters.Regex("^üÜî ID –∫–æ–º–ø–∞–Ω–∏–∏$"), show_company_id))
        app.add_handler(MessageHandler(filters.Regex("^üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É$"), pay_subscription))

        app.add_handler(MessageHandler(filters.Regex("^üÜî –ú–æ–π ID$"), show_my_id))

# –ù–∞–∑–∞–¥ –∏–∑ –ø–æ–¥–º–µ–Ω—é
        app.add_handler(MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), handle_admin_back))
        app.add_handler(CommandHandler("award_bonus", award_bonus))
        app.add_handler(CommandHandler("assign_penalty", assign_penalty))
        
        app.add_handler(conv_handler_add_task)

        app.add_handler(CallbackQueryHandler(handle_complete_checklist_button, pattern="^complete_"))
        app.add_handler(CallbackQueryHandler(handle_callback)) #—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å –≤–Ω–∏–∑—É
        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("view_employees_checklists", admin_view_employees_checklists))
        app.add_handler(CommandHandler("view_employee_checklists", admin_view_employee_checklists))
        app.add_handler(CommandHandler("complete_checklist", complete_checklist))
        app.add_handler(CommandHandler("my_id", show_my_id))
        app.add_handler(CommandHandler("set_salary_and_hours", set_salary_and_hours))
        app.add_handler(CommandHandler("my_full_salary", my_full_salary))
        app.add_handler(CommandHandler("my_profile", my_profile))
        app.add_handler(CommandHandler("show_company_id", show_company_id))
        app.add_handler(CommandHandler("view_tasks", view_tasks))
        app.add_handler(CommandHandler("complete_task", complete_task))
        app.add_handler(CommandHandler("salary", my_full_salary))
        app.add_handler(CommandHandler("salary_report", salary_report))
        app.add_handler(CommandHandler("view_attendance", view_attendance))
        app.add_handler(CommandHandler("delete_employee", delete_employee))
        app.add_handler(CommandHandler("pay_subscription", pay_subscription))
        
        app.add_handler(CommandHandler("checklist_report", checklist_report))
        app.add_handler(CommandHandler("show_reg", show_reg))
        app.add_handler(CommandHandler("start_stats", start_stats))
        app.add_handler(MessageHandler(filters.Regex("^üìä –û—Ç—á–µ—Ç –ø–æ —á–µ–∫-–ª–∏—Å—Ç–∞–º$"), checklist_report))
        
        app.add_handler(MessageHandler(filters.Regex('^üí≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞$'), my_subscription))
        app.add_handler(MessageHandler(filters.Regex(r"^‚ùì –ß—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç$"), show_features))
    
        app.add_handler(CommandHandler("feedback", feedback))
        app.add_handler(CommandHandler("Stocks_bot", stocks_bot))
       

        app.add_handler(CommandHandler("delete_item_type", delete_item_type))
        app.add_handler(
    MessageHandler(filters.Regex(r"^‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä$"), prompt_delete_item_simple)
)
        

        # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler'—ã
        app.add_handler(conv_handler_register_employee)
        app.add_handler(conv_handler_register_company)
        
        app.add_handler(conv_add_checklist_task)
        
        app.add_handler(conv_collections)

        app.add_handler(MessageHandler(
    filters.TEXT & ~filters.COMMAND & filters.Regex(r"^\d+$"),
    confirm_task_completion
))
        app.add_handler(MessageHandler(filters.Regex("^üì¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å$"), lambda update, context: update.message.reply_text(
    "üì¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n\n"
    "üëâ [@art_ooi](https://t.me/art_ooi)", parse_mode="Markdown"
)))
        app.add_handler(CommandHandler("delete_company", delete_company))
        app.add_handler(CommandHandler("purge_employee", purge_employee))

        job_queue = app.job_queue
        job_queue.run_repeating(check_long_shifts, interval=3600, first=3600)

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
    finally:
        pass
